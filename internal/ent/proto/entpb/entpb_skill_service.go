// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	ent "refernet/internal/ent"
	job "refernet/internal/ent/job"
	skill "refernet/internal/ent/skill"
	workexperience "refernet/internal/ent/workexperience"
)

// SkillService implements SkillServiceServer
type SkillService struct {
	client *ent.Client
	UnimplementedSkillServiceServer
}

// NewSkillService returns a new SkillService
func NewSkillService(client *ent.Client) *SkillService {
	return &SkillService{
		client: client,
	}
}

// toProtoSkill transforms the ent type to the pb type
func toProtoSkill(e *ent.Skill) (*Skill, error) {
	v := &Skill{}
	createdat := timestamppb.New(e.CreatedAt)
	v.CreatedAt = createdat
	id := int32(e.ID)
	v.Id = id
	logourl := e.LogoURL
	v.LogoUrl = logourl
	name := e.Name
	v.Name = name
	updatedat := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updatedat
	for _, edg := range e.Edges.Experiences {
		id := int32(edg.ID)
		v.Experiences = append(v.Experiences, &WorkExperience{
			Id: id,
		})
	}
	for _, edg := range e.Edges.Jobs {
		id := int32(edg.ID)
		v.Jobs = append(v.Jobs, &Job{
			Id: id,
		})
	}
	return v, nil
}

// Create implements SkillServiceServer.Create
func (svc *SkillService) Create(ctx context.Context, req *CreateSkillRequest) (*Skill, error) {
	skill := req.GetSkill()
	m := svc.client.Skill.Create()
	skillCreatedAt := runtime.ExtractTime(skill.GetCreatedAt())
	m.SetCreatedAt(skillCreatedAt)
	skillLogoURL := skill.GetLogoUrl()
	m.SetLogoURL(skillLogoURL)
	skillName := skill.GetName()
	m.SetName(skillName)
	skillUpdatedAt := runtime.ExtractTime(skill.GetUpdatedAt())
	m.SetUpdatedAt(skillUpdatedAt)
	for _, item := range skill.GetExperiences() {
		experiences := int(item.GetId())
		m.AddExperienceIDs(experiences)
	}
	for _, item := range skill.GetJobs() {
		jobs := int(item.GetId())
		m.AddJobIDs(jobs)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoSkill(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements SkillServiceServer.Get
func (svc *SkillService) Get(ctx context.Context, req *GetSkillRequest) (*Skill, error) {
	var (
		err error
		get *ent.Skill
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetSkillRequest_VIEW_UNSPECIFIED, GetSkillRequest_BASIC:
		get, err = svc.client.Skill.Get(ctx, id)
	case GetSkillRequest_WITH_EDGE_IDS:
		get, err = svc.client.Skill.Query().
			Where(skill.ID(id)).
			WithExperiences(func(query *ent.WorkExperienceQuery) {
				query.Select(workexperience.FieldID)
			}).
			WithJobs(func(query *ent.JobQuery) {
				query.Select(job.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoSkill(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements SkillServiceServer.Update
func (svc *SkillService) Update(ctx context.Context, req *UpdateSkillRequest) (*Skill, error) {
	skill := req.GetSkill()
	skillID := int(skill.GetId())
	m := svc.client.Skill.UpdateOneID(skillID)
	skillLogoURL := skill.GetLogoUrl()
	m.SetLogoURL(skillLogoURL)
	skillName := skill.GetName()
	m.SetName(skillName)
	skillUpdatedAt := runtime.ExtractTime(skill.GetUpdatedAt())
	m.SetUpdatedAt(skillUpdatedAt)
	for _, item := range skill.GetExperiences() {
		experiences := int(item.GetId())
		m.AddExperienceIDs(experiences)
	}
	for _, item := range skill.GetJobs() {
		jobs := int(item.GetId())
		m.AddJobIDs(jobs)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoSkill(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements SkillServiceServer.Delete
func (svc *SkillService) Delete(ctx context.Context, req *DeleteSkillRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Skill.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
