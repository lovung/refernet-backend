// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	ent "refernet/internal/ent"
	job "refernet/internal/ent/job"
	skill "refernet/internal/ent/skill"
	user "refernet/internal/ent/user"
	strings "strings"
)

// JobService implements JobServiceServer
type JobService struct {
	client *ent.Client
	UnimplementedJobServiceServer
}

// NewJobService returns a new JobService
func NewJobService(client *ent.Client) *JobService {
	return &JobService{
		client: client,
	}
}

func toProtoJob_EmploymentType(e job.EmploymentType) Job_EmploymentType {
	if v, ok := Job_EmploymentType_value[strings.ToUpper(string(e))]; ok {
		return Job_EmploymentType(v)
	}
	return Job_EmploymentType(0)
}

func toEntJob_EmploymentType(e Job_EmploymentType) job.EmploymentType {
	if v, ok := Job_EmploymentType_name[int32(e)]; ok {
		return job.EmploymentType(strings.ToLower(v))
	}
	return ""
}

func toProtoJob_SalaryUnit(e job.SalaryUnit) Job_SalaryUnit {
	if v, ok := Job_SalaryUnit_value[strings.ToUpper(string(e))]; ok {
		return Job_SalaryUnit(v)
	}
	return Job_SalaryUnit(0)
}

func toEntJob_SalaryUnit(e Job_SalaryUnit) job.SalaryUnit {
	if v, ok := Job_SalaryUnit_name[int32(e)]; ok {
		return job.SalaryUnit(strings.ToLower(v))
	}
	return ""
}

// toProtoJob transforms the ent type to the pb type
func toProtoJob(e *ent.Job) (*Job, error) {
	v := &Job{}
	benefits := e.Benefits
	v.Benefits = benefits
	createdat := timestamppb.New(e.CreatedAt)
	v.CreatedAt = createdat
	employmenttype := toProtoJob_EmploymentType(e.EmploymentType)
	v.EmploymentType = employmenttype
	id := int32(e.ID)
	v.Id = id
	maxsalary := e.MaxSalary
	v.MaxSalary = maxsalary
	minsalary := e.MinSalary
	v.MinSalary = minsalary
	requirements := e.Requirements
	v.Requirements = requirements
	responsibilities := e.Responsibilities
	v.Responsibilities = responsibilities
	salaryunit := toProtoJob_SalaryUnit(e.SalaryUnit)
	v.SalaryUnit = salaryunit
	title := e.Title
	v.Title = title
	updatedat := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updatedat
	if edg := e.Edges.Owner; edg != nil {
		id := int32(edg.ID)
		v.Owner = &User{
			Id: id,
		}
	}
	for _, edg := range e.Edges.Skills {
		id := int32(edg.ID)
		v.Skills = append(v.Skills, &Skill{
			Id: id,
		})
	}
	return v, nil
}

// Create implements JobServiceServer.Create
func (svc *JobService) Create(ctx context.Context, req *CreateJobRequest) (*Job, error) {
	job := req.GetJob()
	m := svc.client.Job.Create()
	jobBenefits := job.GetBenefits()
	m.SetBenefits(jobBenefits)
	jobCreatedAt := runtime.ExtractTime(job.GetCreatedAt())
	m.SetCreatedAt(jobCreatedAt)
	jobEmploymentType := toEntJob_EmploymentType(job.GetEmploymentType())
	m.SetEmploymentType(jobEmploymentType)
	jobMaxSalary := uint64(job.GetMaxSalary())
	m.SetMaxSalary(jobMaxSalary)
	jobMinSalary := uint64(job.GetMinSalary())
	m.SetMinSalary(jobMinSalary)
	jobRequirements := job.GetRequirements()
	m.SetRequirements(jobRequirements)
	jobResponsibilities := job.GetResponsibilities()
	m.SetResponsibilities(jobResponsibilities)
	jobSalaryUnit := toEntJob_SalaryUnit(job.GetSalaryUnit())
	m.SetSalaryUnit(jobSalaryUnit)
	jobTitle := job.GetTitle()
	m.SetTitle(jobTitle)
	jobUpdatedAt := runtime.ExtractTime(job.GetUpdatedAt())
	m.SetUpdatedAt(jobUpdatedAt)
	jobOwner := int(job.GetOwner().GetId())
	m.SetOwnerID(jobOwner)
	for _, item := range job.GetSkills() {
		skills := int(item.GetId())
		m.AddSkillIDs(skills)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoJob(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements JobServiceServer.Get
func (svc *JobService) Get(ctx context.Context, req *GetJobRequest) (*Job, error) {
	var (
		err error
		get *ent.Job
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetJobRequest_VIEW_UNSPECIFIED, GetJobRequest_BASIC:
		get, err = svc.client.Job.Get(ctx, id)
	case GetJobRequest_WITH_EDGE_IDS:
		get, err = svc.client.Job.Query().
			Where(job.ID(id)).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			WithSkills(func(query *ent.SkillQuery) {
				query.Select(skill.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoJob(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements JobServiceServer.Update
func (svc *JobService) Update(ctx context.Context, req *UpdateJobRequest) (*Job, error) {
	job := req.GetJob()
	jobID := int(job.GetId())
	m := svc.client.Job.UpdateOneID(jobID)
	jobBenefits := job.GetBenefits()
	m.SetBenefits(jobBenefits)
	jobEmploymentType := toEntJob_EmploymentType(job.GetEmploymentType())
	m.SetEmploymentType(jobEmploymentType)
	jobMaxSalary := uint64(job.GetMaxSalary())
	m.SetMaxSalary(jobMaxSalary)
	jobMinSalary := uint64(job.GetMinSalary())
	m.SetMinSalary(jobMinSalary)
	jobRequirements := job.GetRequirements()
	m.SetRequirements(jobRequirements)
	jobResponsibilities := job.GetResponsibilities()
	m.SetResponsibilities(jobResponsibilities)
	jobSalaryUnit := toEntJob_SalaryUnit(job.GetSalaryUnit())
	m.SetSalaryUnit(jobSalaryUnit)
	jobTitle := job.GetTitle()
	m.SetTitle(jobTitle)
	jobUpdatedAt := runtime.ExtractTime(job.GetUpdatedAt())
	m.SetUpdatedAt(jobUpdatedAt)
	jobOwner := int(job.GetOwner().GetId())
	m.SetOwnerID(jobOwner)
	for _, item := range job.GetSkills() {
		skills := int(item.GetId())
		m.AddSkillIDs(skills)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoJob(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements JobServiceServer.Delete
func (svc *JobService) Delete(ctx context.Context, req *DeleteJobRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Job.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
