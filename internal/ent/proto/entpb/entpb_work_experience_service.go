// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	ent "refernet/internal/ent"
	company "refernet/internal/ent/company"
	skill "refernet/internal/ent/skill"
	user "refernet/internal/ent/user"
	workexperience "refernet/internal/ent/workexperience"
)

// WorkExperienceService implements WorkExperienceServiceServer
type WorkExperienceService struct {
	client *ent.Client
	UnimplementedWorkExperienceServiceServer
}

// NewWorkExperienceService returns a new WorkExperienceService
func NewWorkExperienceService(client *ent.Client) *WorkExperienceService {
	return &WorkExperienceService{
		client: client,
	}
}

// toProtoWorkExperience transforms the ent type to the pb type
func toProtoWorkExperience(e *ent.WorkExperience) (*WorkExperience, error) {
	v := &WorkExperience{}
	createdat := timestamppb.New(e.CreatedAt)
	v.CreatedAt = createdat
	description := e.Description
	v.Description = description
	enddate := timestamppb.New(e.EndDate)
	v.EndDate = enddate
	id := int32(e.ID)
	v.Id = id
	location := e.Location
	v.Location = location
	startdate := timestamppb.New(e.StartDate)
	v.StartDate = startdate
	title := e.Title
	v.Title = title
	updatedat := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updatedat
	if edg := e.Edges.InCompany; edg != nil {
		id := int32(edg.ID)
		v.InCompany = &Company{
			Id: id,
		}
	}
	if edg := e.Edges.Owner; edg != nil {
		id := int32(edg.ID)
		v.Owner = &User{
			Id: id,
		}
	}
	for _, edg := range e.Edges.Skills {
		id := int32(edg.ID)
		v.Skills = append(v.Skills, &Skill{
			Id: id,
		})
	}
	return v, nil
}

// Create implements WorkExperienceServiceServer.Create
func (svc *WorkExperienceService) Create(ctx context.Context, req *CreateWorkExperienceRequest) (*WorkExperience, error) {
	workexperience := req.GetWorkExperience()
	m := svc.client.WorkExperience.Create()
	workexperienceCreatedAt := runtime.ExtractTime(workexperience.GetCreatedAt())
	m.SetCreatedAt(workexperienceCreatedAt)
	workexperienceDescription := workexperience.GetDescription()
	m.SetDescription(workexperienceDescription)
	if workexperience.GetEndDate() != nil {
		workexperienceEndDate := runtime.ExtractTime(workexperience.GetEndDate())
		m.SetEndDate(workexperienceEndDate)
	}
	workexperienceLocation := workexperience.GetLocation()
	m.SetLocation(workexperienceLocation)
	workexperienceStartDate := runtime.ExtractTime(workexperience.GetStartDate())
	m.SetStartDate(workexperienceStartDate)
	workexperienceTitle := workexperience.GetTitle()
	m.SetTitle(workexperienceTitle)
	workexperienceUpdatedAt := runtime.ExtractTime(workexperience.GetUpdatedAt())
	m.SetUpdatedAt(workexperienceUpdatedAt)
	workexperienceInCompany := int(workexperience.GetInCompany().GetId())
	m.SetInCompanyID(workexperienceInCompany)
	workexperienceOwner := int(workexperience.GetOwner().GetId())
	m.SetOwnerID(workexperienceOwner)
	for _, item := range workexperience.GetSkills() {
		skills := int(item.GetId())
		m.AddSkillIDs(skills)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoWorkExperience(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements WorkExperienceServiceServer.Get
func (svc *WorkExperienceService) Get(ctx context.Context, req *GetWorkExperienceRequest) (*WorkExperience, error) {
	var (
		err error
		get *ent.WorkExperience
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetWorkExperienceRequest_VIEW_UNSPECIFIED, GetWorkExperienceRequest_BASIC:
		get, err = svc.client.WorkExperience.Get(ctx, id)
	case GetWorkExperienceRequest_WITH_EDGE_IDS:
		get, err = svc.client.WorkExperience.Query().
			Where(workexperience.ID(id)).
			WithInCompany(func(query *ent.CompanyQuery) {
				query.Select(company.FieldID)
			}).
			WithOwner(func(query *ent.UserQuery) {
				query.Select(user.FieldID)
			}).
			WithSkills(func(query *ent.SkillQuery) {
				query.Select(skill.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoWorkExperience(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements WorkExperienceServiceServer.Update
func (svc *WorkExperienceService) Update(ctx context.Context, req *UpdateWorkExperienceRequest) (*WorkExperience, error) {
	workexperience := req.GetWorkExperience()
	workexperienceID := int(workexperience.GetId())
	m := svc.client.WorkExperience.UpdateOneID(workexperienceID)
	workexperienceDescription := workexperience.GetDescription()
	m.SetDescription(workexperienceDescription)
	if workexperience.GetEndDate() != nil {
		workexperienceEndDate := runtime.ExtractTime(workexperience.GetEndDate())
		m.SetEndDate(workexperienceEndDate)
	}
	workexperienceLocation := workexperience.GetLocation()
	m.SetLocation(workexperienceLocation)
	workexperienceStartDate := runtime.ExtractTime(workexperience.GetStartDate())
	m.SetStartDate(workexperienceStartDate)
	workexperienceTitle := workexperience.GetTitle()
	m.SetTitle(workexperienceTitle)
	workexperienceUpdatedAt := runtime.ExtractTime(workexperience.GetUpdatedAt())
	m.SetUpdatedAt(workexperienceUpdatedAt)
	workexperienceInCompany := int(workexperience.GetInCompany().GetId())
	m.SetInCompanyID(workexperienceInCompany)
	workexperienceOwner := int(workexperience.GetOwner().GetId())
	m.SetOwnerID(workexperienceOwner)
	for _, item := range workexperience.GetSkills() {
		skills := int(item.GetId())
		m.AddSkillIDs(skills)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoWorkExperience(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements WorkExperienceServiceServer.Delete
func (svc *WorkExperienceService) Delete(ctx context.Context, req *DeleteWorkExperienceRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.WorkExperience.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
