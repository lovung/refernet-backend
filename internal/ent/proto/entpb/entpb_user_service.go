// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	ent "refernet/internal/ent"
	job "refernet/internal/ent/job"
	user "refernet/internal/ent/user"
	workexperience "refernet/internal/ent/workexperience"
	strings "strings"
)

// UserService implements UserServiceServer
type UserService struct {
	client *ent.Client
	UnimplementedUserServiceServer
}

// NewUserService returns a new UserService
func NewUserService(client *ent.Client) *UserService {
	return &UserService{
		client: client,
	}
}

func toProtoUser_Status(e user.Status) User_Status {
	if v, ok := User_Status_value[strings.ToUpper(string(e))]; ok {
		return User_Status(v)
	}
	return User_Status(0)
}

func toEntUser_Status(e User_Status) user.Status {
	if v, ok := User_Status_name[int32(e)]; ok {
		return user.Status(strings.ToLower(v))
	}
	return ""
}

// toProtoUser transforms the ent type to the pb type
func toProtoUser(e *ent.User) (*User, error) {
	v := &User{}
	bio := e.Bio
	v.Bio = bio
	createdat := timestamppb.New(e.CreatedAt)
	v.CreatedAt = createdat
	email := e.Email
	v.Email = email
	fullname := e.Fullname
	v.Fullname = fullname
	githubprofile := e.GithubProfile
	v.GithubProfile = githubprofile
	id := int32(e.ID)
	v.Id = id
	intro := e.Intro
	v.Intro = intro
	password := e.Password
	v.Password = password
	phone := e.Phone
	v.Phone = phone
	profilepictureurl := e.ProfilePictureURL
	v.ProfilePictureUrl = profilepictureurl
	status := toProtoUser_Status(e.Status)
	v.Status = status
	updatedat := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updatedat
	username := e.Username
	v.Username = username
	for _, edg := range e.Edges.Experiences {
		id := int32(edg.ID)
		v.Experiences = append(v.Experiences, &WorkExperience{
			Id: id,
		})
	}
	for _, edg := range e.Edges.Jobs {
		id := int32(edg.ID)
		v.Jobs = append(v.Jobs, &Job{
			Id: id,
		})
	}
	return v, nil
}

// Create implements UserServiceServer.Create
func (svc *UserService) Create(ctx context.Context, req *CreateUserRequest) (*User, error) {
	user := req.GetUser()
	m := svc.client.User.Create()
	userBio := user.GetBio()
	m.SetBio(userBio)
	userCreatedAt := runtime.ExtractTime(user.GetCreatedAt())
	m.SetCreatedAt(userCreatedAt)
	userEmail := user.GetEmail()
	m.SetEmail(userEmail)
	userFullname := user.GetFullname()
	m.SetFullname(userFullname)
	userGithubProfile := user.GetGithubProfile()
	m.SetGithubProfile(userGithubProfile)
	userIntro := user.GetIntro()
	m.SetIntro(userIntro)
	userPassword := user.GetPassword()
	m.SetPassword(userPassword)
	userPhone := user.GetPhone()
	m.SetPhone(userPhone)
	userProfilePictureURL := user.GetProfilePictureUrl()
	m.SetProfilePictureURL(userProfilePictureURL)
	userStatus := toEntUser_Status(user.GetStatus())
	m.SetStatus(userStatus)
	userUpdatedAt := runtime.ExtractTime(user.GetUpdatedAt())
	m.SetUpdatedAt(userUpdatedAt)
	userUsername := user.GetUsername()
	m.SetUsername(userUsername)
	for _, item := range user.GetExperiences() {
		experiences := int(item.GetId())
		m.AddExperienceIDs(experiences)
	}
	for _, item := range user.GetJobs() {
		jobs := int(item.GetId())
		m.AddJobIDs(jobs)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUser(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements UserServiceServer.Get
func (svc *UserService) Get(ctx context.Context, req *GetUserRequest) (*User, error) {
	var (
		err error
		get *ent.User
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetUserRequest_VIEW_UNSPECIFIED, GetUserRequest_BASIC:
		get, err = svc.client.User.Get(ctx, id)
	case GetUserRequest_WITH_EDGE_IDS:
		get, err = svc.client.User.Query().
			Where(user.ID(id)).
			WithExperiences(func(query *ent.WorkExperienceQuery) {
				query.Select(workexperience.FieldID)
			}).
			WithJobs(func(query *ent.JobQuery) {
				query.Select(job.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoUser(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}
	return nil, nil

}

// Update implements UserServiceServer.Update
func (svc *UserService) Update(ctx context.Context, req *UpdateUserRequest) (*User, error) {
	user := req.GetUser()
	userID := int(user.GetId())
	m := svc.client.User.UpdateOneID(userID)
	userBio := user.GetBio()
	m.SetBio(userBio)
	userEmail := user.GetEmail()
	m.SetEmail(userEmail)
	userFullname := user.GetFullname()
	m.SetFullname(userFullname)
	userGithubProfile := user.GetGithubProfile()
	m.SetGithubProfile(userGithubProfile)
	userIntro := user.GetIntro()
	m.SetIntro(userIntro)
	userPassword := user.GetPassword()
	m.SetPassword(userPassword)
	userPhone := user.GetPhone()
	m.SetPhone(userPhone)
	userProfilePictureURL := user.GetProfilePictureUrl()
	m.SetProfilePictureURL(userProfilePictureURL)
	userStatus := toEntUser_Status(user.GetStatus())
	m.SetStatus(userStatus)
	userUpdatedAt := runtime.ExtractTime(user.GetUpdatedAt())
	m.SetUpdatedAt(userUpdatedAt)
	userUsername := user.GetUsername()
	m.SetUsername(userUsername)
	for _, item := range user.GetExperiences() {
		experiences := int(item.GetId())
		m.AddExperienceIDs(experiences)
	}
	for _, item := range user.GetJobs() {
		jobs := int(item.GetId())
		m.AddJobIDs(jobs)
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoUser(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements UserServiceServer.Delete
func (svc *UserService) Delete(ctx context.Context, req *DeleteUserRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.User.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}
