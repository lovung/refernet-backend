// Code generated by entc, DO NOT EDIT.

package workexperience

import (
	"time"
)

const (
	// Label holds the string label denoting the workexperience type in the database.
	Label = "work_experience"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeInCompany holds the string denoting the in_company edge name in mutations.
	EdgeInCompany = "in_company"
	// EdgeSkills holds the string denoting the skills edge name in mutations.
	EdgeSkills = "skills"
	// Table holds the table name of the workexperience in the database.
	Table = "work_experiences"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "work_experiences"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_experiences"
	// InCompanyTable is the table that holds the in_company relation/edge.
	InCompanyTable = "work_experiences"
	// InCompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	InCompanyInverseTable = "companies"
	// InCompanyColumn is the table column denoting the in_company relation/edge.
	InCompanyColumn = "company_staffs"
	// SkillsTable is the table that holds the skills relation/edge. The primary key declared below.
	SkillsTable = "skill_experiences"
	// SkillsInverseTable is the table name for the Skill entity.
	// It exists in this package in order to avoid circular dependency with the "skill" package.
	SkillsInverseTable = "skills"
)

// Columns holds all SQL columns for workexperience fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTitle,
	FieldLocation,
	FieldStartDate,
	FieldEndDate,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "work_experiences"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"company_staffs",
	"user_experiences",
}

var (
	// SkillsPrimaryKey and SkillsColumn2 are the table columns denoting the
	// primary key for the skills relation (M2M).
	SkillsPrimaryKey = []string{"skill_id", "work_experience_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
)
