// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"refernet/internal/ent/job"
	"refernet/internal/ent/skill"
	"refernet/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (jc *JobCreate) SetCreatedAt(t time.Time) *JobCreate {
	jc.mutation.SetCreatedAt(t)
	return jc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableCreatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCreatedAt(*t)
	}
	return jc
}

// SetUpdatedAt sets the "updated_at" field.
func (jc *JobCreate) SetUpdatedAt(t time.Time) *JobCreate {
	jc.mutation.SetUpdatedAt(t)
	return jc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableUpdatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetUpdatedAt(*t)
	}
	return jc
}

// SetTitle sets the "title" field.
func (jc *JobCreate) SetTitle(s string) *JobCreate {
	jc.mutation.SetTitle(s)
	return jc
}

// SetMinSalary sets the "min_salary" field.
func (jc *JobCreate) SetMinSalary(u uint64) *JobCreate {
	jc.mutation.SetMinSalary(u)
	return jc
}

// SetMaxSalary sets the "max_salary" field.
func (jc *JobCreate) SetMaxSalary(u uint64) *JobCreate {
	jc.mutation.SetMaxSalary(u)
	return jc
}

// SetSalaryUnit sets the "salary_unit" field.
func (jc *JobCreate) SetSalaryUnit(ju job.SalaryUnit) *JobCreate {
	jc.mutation.SetSalaryUnit(ju)
	return jc
}

// SetNillableSalaryUnit sets the "salary_unit" field if the given value is not nil.
func (jc *JobCreate) SetNillableSalaryUnit(ju *job.SalaryUnit) *JobCreate {
	if ju != nil {
		jc.SetSalaryUnit(*ju)
	}
	return jc
}

// SetType sets the "type" field.
func (jc *JobCreate) SetType(j job.Type) *JobCreate {
	jc.mutation.SetType(j)
	return jc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (jc *JobCreate) SetNillableType(j *job.Type) *JobCreate {
	if j != nil {
		jc.SetType(*j)
	}
	return jc
}

// SetRequirements sets the "requirements" field.
func (jc *JobCreate) SetRequirements(s string) *JobCreate {
	jc.mutation.SetRequirements(s)
	return jc
}

// SetResponsibilities sets the "responsibilities" field.
func (jc *JobCreate) SetResponsibilities(s string) *JobCreate {
	jc.mutation.SetResponsibilities(s)
	return jc
}

// SetBenefits sets the "benefits" field.
func (jc *JobCreate) SetBenefits(s string) *JobCreate {
	jc.mutation.SetBenefits(s)
	return jc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (jc *JobCreate) SetOwnerID(id int) *JobCreate {
	jc.mutation.SetOwnerID(id)
	return jc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (jc *JobCreate) SetNillableOwnerID(id *int) *JobCreate {
	if id != nil {
		jc = jc.SetOwnerID(*id)
	}
	return jc
}

// SetOwner sets the "owner" edge to the User entity.
func (jc *JobCreate) SetOwner(u *User) *JobCreate {
	return jc.SetOwnerID(u.ID)
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (jc *JobCreate) AddSkillIDs(ids ...int) *JobCreate {
	jc.mutation.AddSkillIDs(ids...)
	return jc
}

// AddSkills adds the "skills" edges to the Skill entity.
func (jc *JobCreate) AddSkills(s ...*Skill) *JobCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return jc.AddSkillIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	jc.defaults()
	if len(jc.hooks) == 0 {
		if err = jc.check(); err != nil {
			return nil, err
		}
		node, err = jc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = jc.check(); err != nil {
				return nil, err
			}
			jc.mutation = mutation
			if node, err = jc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(jc.hooks) - 1; i >= 0; i-- {
			if jc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = jc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.CreatedAt(); !ok {
		v := job.DefaultCreatedAt()
		jc.mutation.SetCreatedAt(v)
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		v := job.DefaultUpdatedAt()
		jc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jc.mutation.SalaryUnit(); !ok {
		v := job.DefaultSalaryUnit
		jc.mutation.SetSalaryUnit(v)
	}
	if _, ok := jc.mutation.GetType(); !ok {
		v := job.DefaultType
		jc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := jc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := jc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if v, ok := jc.mutation.Title(); ok {
		if err := job.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "title": %w`, err)}
		}
	}
	if _, ok := jc.mutation.MinSalary(); !ok {
		return &ValidationError{Name: "min_salary", err: errors.New(`ent: missing required field "min_salary"`)}
	}
	if v, ok := jc.mutation.MinSalary(); ok {
		if err := job.MinSalaryValidator(v); err != nil {
			return &ValidationError{Name: "min_salary", err: fmt.Errorf(`ent: validator failed for field "min_salary": %w`, err)}
		}
	}
	if _, ok := jc.mutation.MaxSalary(); !ok {
		return &ValidationError{Name: "max_salary", err: errors.New(`ent: missing required field "max_salary"`)}
	}
	if v, ok := jc.mutation.MaxSalary(); ok {
		if err := job.MaxSalaryValidator(v); err != nil {
			return &ValidationError{Name: "max_salary", err: fmt.Errorf(`ent: validator failed for field "max_salary": %w`, err)}
		}
	}
	if _, ok := jc.mutation.SalaryUnit(); !ok {
		return &ValidationError{Name: "salary_unit", err: errors.New(`ent: missing required field "salary_unit"`)}
	}
	if v, ok := jc.mutation.SalaryUnit(); ok {
		if err := job.SalaryUnitValidator(v); err != nil {
			return &ValidationError{Name: "salary_unit", err: fmt.Errorf(`ent: validator failed for field "salary_unit": %w`, err)}
		}
	}
	if _, ok := jc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if v, ok := jc.mutation.GetType(); ok {
		if err := job.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "type": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Requirements(); !ok {
		return &ValidationError{Name: "requirements", err: errors.New(`ent: missing required field "requirements"`)}
	}
	if v, ok := jc.mutation.Requirements(); ok {
		if err := job.RequirementsValidator(v); err != nil {
			return &ValidationError{Name: "requirements", err: fmt.Errorf(`ent: validator failed for field "requirements": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Responsibilities(); !ok {
		return &ValidationError{Name: "responsibilities", err: errors.New(`ent: missing required field "responsibilities"`)}
	}
	if v, ok := jc.mutation.Responsibilities(); ok {
		if err := job.ResponsibilitiesValidator(v); err != nil {
			return &ValidationError{Name: "responsibilities", err: fmt.Errorf(`ent: validator failed for field "responsibilities": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Benefits(); !ok {
		return &ValidationError{Name: "benefits", err: errors.New(`ent: missing required field "benefits"`)}
	}
	if v, ok := jc.mutation.Benefits(); ok {
		if err := job.BenefitsValidator(v); err != nil {
			return &ValidationError{Name: "benefits", err: fmt.Errorf(`ent: validator failed for field "benefits": %w`, err)}
		}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: job.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		}
	)
	if value, ok := jc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := jc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := jc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := jc.mutation.MinSalary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMinSalary,
		})
		_node.MinSalary = value
	}
	if value, ok := jc.mutation.MaxSalary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMaxSalary,
		})
		_node.MaxSalary = value
	}
	if value, ok := jc.mutation.SalaryUnit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: job.FieldSalaryUnit,
		})
		_node.SalaryUnit = value
	}
	if value, ok := jc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: job.FieldType,
		})
		_node.Type = value
	}
	if value, ok := jc.mutation.Requirements(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldRequirements,
		})
		_node.Requirements = value
	}
	if value, ok := jc.mutation.Responsibilities(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldResponsibilities,
		})
		_node.Responsibilities = value
	}
	if value, ok := jc.mutation.Benefits(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldBenefits,
		})
		_node.Benefits = value
	}
	if nodes := jc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.SkillsTable,
			Columns: job.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
