// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"refernet/internal/ent/job"
	"refernet/internal/ent/predicate"
	"refernet/internal/ent/skill"
	"refernet/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where adds a new predicate for the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.predicates = append(ju.mutation.predicates, ps...)
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JobUpdate) SetUpdatedAt(t time.Time) *JobUpdate {
	ju.mutation.SetUpdatedAt(t)
	return ju
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableUpdatedAt(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetUpdatedAt(*t)
	}
	return ju
}

// SetTitle sets the "title" field.
func (ju *JobUpdate) SetTitle(s string) *JobUpdate {
	ju.mutation.SetTitle(s)
	return ju
}

// SetLocations sets the "locations" field.
func (ju *JobUpdate) SetLocations(s []string) *JobUpdate {
	ju.mutation.SetLocations(s)
	return ju
}

// SetMinSalary sets the "min_salary" field.
func (ju *JobUpdate) SetMinSalary(u uint64) *JobUpdate {
	ju.mutation.ResetMinSalary()
	ju.mutation.SetMinSalary(u)
	return ju
}

// AddMinSalary adds u to the "min_salary" field.
func (ju *JobUpdate) AddMinSalary(u uint64) *JobUpdate {
	ju.mutation.AddMinSalary(u)
	return ju
}

// SetMaxSalary sets the "max_salary" field.
func (ju *JobUpdate) SetMaxSalary(u uint64) *JobUpdate {
	ju.mutation.ResetMaxSalary()
	ju.mutation.SetMaxSalary(u)
	return ju
}

// AddMaxSalary adds u to the "max_salary" field.
func (ju *JobUpdate) AddMaxSalary(u uint64) *JobUpdate {
	ju.mutation.AddMaxSalary(u)
	return ju
}

// SetSalaryUnit sets the "salary_unit" field.
func (ju *JobUpdate) SetSalaryUnit(value job.SalaryUnit) *JobUpdate {
	ju.mutation.SetSalaryUnit(value)
	return ju
}

// SetNillableSalaryUnit sets the "salary_unit" field if the given value is not nil.
func (ju *JobUpdate) SetNillableSalaryUnit(value *job.SalaryUnit) *JobUpdate {
	if value != nil {
		ju.SetSalaryUnit(*value)
	}
	return ju
}

// SetType sets the "type" field.
func (ju *JobUpdate) SetType(j job.Type) *JobUpdate {
	ju.mutation.SetType(j)
	return ju
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ju *JobUpdate) SetNillableType(j *job.Type) *JobUpdate {
	if j != nil {
		ju.SetType(*j)
	}
	return ju
}

// SetRequirements sets the "requirements" field.
func (ju *JobUpdate) SetRequirements(s string) *JobUpdate {
	ju.mutation.SetRequirements(s)
	return ju
}

// SetResponsibilities sets the "responsibilities" field.
func (ju *JobUpdate) SetResponsibilities(s string) *JobUpdate {
	ju.mutation.SetResponsibilities(s)
	return ju
}

// SetBenefits sets the "benefits" field.
func (ju *JobUpdate) SetBenefits(s string) *JobUpdate {
	ju.mutation.SetBenefits(s)
	return ju
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (ju *JobUpdate) SetOwnerID(id int) *JobUpdate {
	ju.mutation.SetOwnerID(id)
	return ju
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (ju *JobUpdate) SetNillableOwnerID(id *int) *JobUpdate {
	if id != nil {
		ju = ju.SetOwnerID(*id)
	}
	return ju
}

// SetOwner sets the "owner" edge to the User entity.
func (ju *JobUpdate) SetOwner(u *User) *JobUpdate {
	return ju.SetOwnerID(u.ID)
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (ju *JobUpdate) AddSkillIDs(ids ...int) *JobUpdate {
	ju.mutation.AddSkillIDs(ids...)
	return ju
}

// AddSkills adds the "skills" edges to the Skill entity.
func (ju *JobUpdate) AddSkills(s ...*Skill) *JobUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ju.AddSkillIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (ju *JobUpdate) ClearOwner() *JobUpdate {
	ju.mutation.ClearOwner()
	return ju
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (ju *JobUpdate) ClearSkills() *JobUpdate {
	ju.mutation.ClearSkills()
	return ju
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (ju *JobUpdate) RemoveSkillIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveSkillIDs(ids...)
	return ju
}

// RemoveSkills removes "skills" edges to Skill entities.
func (ju *JobUpdate) RemoveSkills(s ...*Skill) *JobUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ju.RemoveSkillIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ju.hooks) == 0 {
		if err = ju.check(); err != nil {
			return 0, err
		}
		affected, err = ju.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ju.check(); err != nil {
				return 0, err
			}
			ju.mutation = mutation
			affected, err = ju.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ju.hooks) - 1; i >= 0; i-- {
			mut = ju.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ju.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.Title(); ok {
		if err := job.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := ju.mutation.MinSalary(); ok {
		if err := job.MinSalaryValidator(v); err != nil {
			return &ValidationError{Name: "min_salary", err: fmt.Errorf("ent: validator failed for field \"min_salary\": %w", err)}
		}
	}
	if v, ok := ju.mutation.MaxSalary(); ok {
		if err := job.MaxSalaryValidator(v); err != nil {
			return &ValidationError{Name: "max_salary", err: fmt.Errorf("ent: validator failed for field \"max_salary\": %w", err)}
		}
	}
	if v, ok := ju.mutation.SalaryUnit(); ok {
		if err := job.SalaryUnitValidator(v); err != nil {
			return &ValidationError{Name: "salary_unit", err: fmt.Errorf("ent: validator failed for field \"salary_unit\": %w", err)}
		}
	}
	if v, ok := ju.mutation.GetType(); ok {
		if err := job.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := ju.mutation.Requirements(); ok {
		if err := job.RequirementsValidator(v); err != nil {
			return &ValidationError{Name: "requirements", err: fmt.Errorf("ent: validator failed for field \"requirements\": %w", err)}
		}
	}
	if v, ok := ju.mutation.Responsibilities(); ok {
		if err := job.ResponsibilitiesValidator(v); err != nil {
			return &ValidationError{Name: "responsibilities", err: fmt.Errorf("ent: validator failed for field \"responsibilities\": %w", err)}
		}
	}
	if v, ok := ju.mutation.Benefits(); ok {
		if err := job.BenefitsValidator(v); err != nil {
			return &ValidationError{Name: "benefits", err: fmt.Errorf("ent: validator failed for field \"benefits\": %w", err)}
		}
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldUpdatedAt,
		})
	}
	if value, ok := ju.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldTitle,
		})
	}
	if value, ok := ju.mutation.Locations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: job.FieldLocations,
		})
	}
	if value, ok := ju.mutation.MinSalary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMinSalary,
		})
	}
	if value, ok := ju.mutation.AddedMinSalary(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMinSalary,
		})
	}
	if value, ok := ju.mutation.MaxSalary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMaxSalary,
		})
	}
	if value, ok := ju.mutation.AddedMaxSalary(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMaxSalary,
		})
	}
	if value, ok := ju.mutation.SalaryUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: job.FieldSalaryUnit,
		})
	}
	if value, ok := ju.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: job.FieldType,
		})
	}
	if value, ok := ju.mutation.Requirements(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldRequirements,
		})
	}
	if value, ok := ju.mutation.Responsibilities(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldResponsibilities,
		})
	}
	if value, ok := ju.mutation.Benefits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldBenefits,
		})
	}
	if ju.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.SkillsTable,
			Columns: job.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !ju.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.SkillsTable,
			Columns: job.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.SkillsTable,
			Columns: job.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JobUpdateOne) SetUpdatedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetUpdatedAt(t)
	return juo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableUpdatedAt(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetUpdatedAt(*t)
	}
	return juo
}

// SetTitle sets the "title" field.
func (juo *JobUpdateOne) SetTitle(s string) *JobUpdateOne {
	juo.mutation.SetTitle(s)
	return juo
}

// SetLocations sets the "locations" field.
func (juo *JobUpdateOne) SetLocations(s []string) *JobUpdateOne {
	juo.mutation.SetLocations(s)
	return juo
}

// SetMinSalary sets the "min_salary" field.
func (juo *JobUpdateOne) SetMinSalary(u uint64) *JobUpdateOne {
	juo.mutation.ResetMinSalary()
	juo.mutation.SetMinSalary(u)
	return juo
}

// AddMinSalary adds u to the "min_salary" field.
func (juo *JobUpdateOne) AddMinSalary(u uint64) *JobUpdateOne {
	juo.mutation.AddMinSalary(u)
	return juo
}

// SetMaxSalary sets the "max_salary" field.
func (juo *JobUpdateOne) SetMaxSalary(u uint64) *JobUpdateOne {
	juo.mutation.ResetMaxSalary()
	juo.mutation.SetMaxSalary(u)
	return juo
}

// AddMaxSalary adds u to the "max_salary" field.
func (juo *JobUpdateOne) AddMaxSalary(u uint64) *JobUpdateOne {
	juo.mutation.AddMaxSalary(u)
	return juo
}

// SetSalaryUnit sets the "salary_unit" field.
func (juo *JobUpdateOne) SetSalaryUnit(ju job.SalaryUnit) *JobUpdateOne {
	juo.mutation.SetSalaryUnit(ju)
	return juo
}

// SetNillableSalaryUnit sets the "salary_unit" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableSalaryUnit(ju *job.SalaryUnit) *JobUpdateOne {
	if ju != nil {
		juo.SetSalaryUnit(*ju)
	}
	return juo
}

// SetType sets the "type" field.
func (juo *JobUpdateOne) SetType(j job.Type) *JobUpdateOne {
	juo.mutation.SetType(j)
	return juo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableType(j *job.Type) *JobUpdateOne {
	if j != nil {
		juo.SetType(*j)
	}
	return juo
}

// SetRequirements sets the "requirements" field.
func (juo *JobUpdateOne) SetRequirements(s string) *JobUpdateOne {
	juo.mutation.SetRequirements(s)
	return juo
}

// SetResponsibilities sets the "responsibilities" field.
func (juo *JobUpdateOne) SetResponsibilities(s string) *JobUpdateOne {
	juo.mutation.SetResponsibilities(s)
	return juo
}

// SetBenefits sets the "benefits" field.
func (juo *JobUpdateOne) SetBenefits(s string) *JobUpdateOne {
	juo.mutation.SetBenefits(s)
	return juo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (juo *JobUpdateOne) SetOwnerID(id int) *JobUpdateOne {
	juo.mutation.SetOwnerID(id)
	return juo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (juo *JobUpdateOne) SetNillableOwnerID(id *int) *JobUpdateOne {
	if id != nil {
		juo = juo.SetOwnerID(*id)
	}
	return juo
}

// SetOwner sets the "owner" edge to the User entity.
func (juo *JobUpdateOne) SetOwner(u *User) *JobUpdateOne {
	return juo.SetOwnerID(u.ID)
}

// AddSkillIDs adds the "skills" edge to the Skill entity by IDs.
func (juo *JobUpdateOne) AddSkillIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddSkillIDs(ids...)
	return juo
}

// AddSkills adds the "skills" edges to the Skill entity.
func (juo *JobUpdateOne) AddSkills(s ...*Skill) *JobUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return juo.AddSkillIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (juo *JobUpdateOne) ClearOwner() *JobUpdateOne {
	juo.mutation.ClearOwner()
	return juo
}

// ClearSkills clears all "skills" edges to the Skill entity.
func (juo *JobUpdateOne) ClearSkills() *JobUpdateOne {
	juo.mutation.ClearSkills()
	return juo
}

// RemoveSkillIDs removes the "skills" edge to Skill entities by IDs.
func (juo *JobUpdateOne) RemoveSkillIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveSkillIDs(ids...)
	return juo
}

// RemoveSkills removes "skills" edges to Skill entities.
func (juo *JobUpdateOne) RemoveSkills(s ...*Skill) *JobUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return juo.RemoveSkillIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	var (
		err  error
		node *Job
	)
	if len(juo.hooks) == 0 {
		if err = juo.check(); err != nil {
			return nil, err
		}
		node, err = juo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JobMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = juo.check(); err != nil {
				return nil, err
			}
			juo.mutation = mutation
			node, err = juo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(juo.hooks) - 1; i >= 0; i-- {
			mut = juo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, juo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.Title(); ok {
		if err := job.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := juo.mutation.MinSalary(); ok {
		if err := job.MinSalaryValidator(v); err != nil {
			return &ValidationError{Name: "min_salary", err: fmt.Errorf("ent: validator failed for field \"min_salary\": %w", err)}
		}
	}
	if v, ok := juo.mutation.MaxSalary(); ok {
		if err := job.MaxSalaryValidator(v); err != nil {
			return &ValidationError{Name: "max_salary", err: fmt.Errorf("ent: validator failed for field \"max_salary\": %w", err)}
		}
	}
	if v, ok := juo.mutation.SalaryUnit(); ok {
		if err := job.SalaryUnitValidator(v); err != nil {
			return &ValidationError{Name: "salary_unit", err: fmt.Errorf("ent: validator failed for field \"salary_unit\": %w", err)}
		}
	}
	if v, ok := juo.mutation.GetType(); ok {
		if err := job.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := juo.mutation.Requirements(); ok {
		if err := job.RequirementsValidator(v); err != nil {
			return &ValidationError{Name: "requirements", err: fmt.Errorf("ent: validator failed for field \"requirements\": %w", err)}
		}
	}
	if v, ok := juo.mutation.Responsibilities(); ok {
		if err := job.ResponsibilitiesValidator(v); err != nil {
			return &ValidationError{Name: "responsibilities", err: fmt.Errorf("ent: validator failed for field \"responsibilities\": %w", err)}
		}
	}
	if v, ok := juo.mutation.Benefits(); ok {
		if err := job.BenefitsValidator(v); err != nil {
			return &ValidationError{Name: "benefits", err: fmt.Errorf("ent: validator failed for field \"benefits\": %w", err)}
		}
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   job.Table,
			Columns: job.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: job.FieldID,
			},
		},
	}
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Job.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: job.FieldUpdatedAt,
		})
	}
	if value, ok := juo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldTitle,
		})
	}
	if value, ok := juo.mutation.Locations(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: job.FieldLocations,
		})
	}
	if value, ok := juo.mutation.MinSalary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMinSalary,
		})
	}
	if value, ok := juo.mutation.AddedMinSalary(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMinSalary,
		})
	}
	if value, ok := juo.mutation.MaxSalary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMaxSalary,
		})
	}
	if value, ok := juo.mutation.AddedMaxSalary(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: job.FieldMaxSalary,
		})
	}
	if value, ok := juo.mutation.SalaryUnit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: job.FieldSalaryUnit,
		})
	}
	if value, ok := juo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: job.FieldType,
		})
	}
	if value, ok := juo.mutation.Requirements(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldRequirements,
		})
	}
	if value, ok := juo.mutation.Responsibilities(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldResponsibilities,
		})
	}
	if value, ok := juo.mutation.Benefits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: job.FieldBenefits,
		})
	}
	if juo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: []string{job.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.SkillsTable,
			Columns: job.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedSkillsIDs(); len(nodes) > 0 && !juo.mutation.SkillsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.SkillsTable,
			Columns: job.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.SkillsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.SkillsTable,
			Columns: job.SkillsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: skill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
