// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"
	"refernet/ent/company"
	"refernet/ent/predicate"
	"refernet/ent/user"
	"refernet/ent/workexperience"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkExperienceQuery is the builder for querying WorkExperience entities.
type WorkExperienceQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.WorkExperience
	// eager-loading edges.
	withUser    *UserQuery
	withCompany *CompanyQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkExperienceQuery builder.
func (weq *WorkExperienceQuery) Where(ps ...predicate.WorkExperience) *WorkExperienceQuery {
	weq.predicates = append(weq.predicates, ps...)
	return weq
}

// Limit adds a limit step to the query.
func (weq *WorkExperienceQuery) Limit(limit int) *WorkExperienceQuery {
	weq.limit = &limit
	return weq
}

// Offset adds an offset step to the query.
func (weq *WorkExperienceQuery) Offset(offset int) *WorkExperienceQuery {
	weq.offset = &offset
	return weq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (weq *WorkExperienceQuery) Unique(unique bool) *WorkExperienceQuery {
	weq.unique = &unique
	return weq
}

// Order adds an order step to the query.
func (weq *WorkExperienceQuery) Order(o ...OrderFunc) *WorkExperienceQuery {
	weq.order = append(weq.order, o...)
	return weq
}

// QueryUser chains the current query on the "user" edge.
func (weq *WorkExperienceQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperience.Table, workexperience.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, workexperience.UserTable, workexperience.UserPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCompany chains the current query on the "company" edge.
func (weq *WorkExperienceQuery) QueryCompany() *CompanyQuery {
	query := &CompanyQuery{config: weq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := weq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workexperience.Table, workexperience.FieldID, selector),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, workexperience.CompanyTable, workexperience.CompanyPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(weq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkExperience entity from the query.
// Returns a *NotFoundError when no WorkExperience was found.
func (weq *WorkExperienceQuery) First(ctx context.Context) (*WorkExperience, error) {
	nodes, err := weq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workexperience.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (weq *WorkExperienceQuery) FirstX(ctx context.Context) *WorkExperience {
	node, err := weq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkExperience ID from the query.
// Returns a *NotFoundError when no WorkExperience ID was found.
func (weq *WorkExperienceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = weq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workexperience.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (weq *WorkExperienceQuery) FirstIDX(ctx context.Context) int {
	id, err := weq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkExperience entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one WorkExperience entity is not found.
// Returns a *NotFoundError when no WorkExperience entities are found.
func (weq *WorkExperienceQuery) Only(ctx context.Context) (*WorkExperience, error) {
	nodes, err := weq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workexperience.Label}
	default:
		return nil, &NotSingularError{workexperience.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (weq *WorkExperienceQuery) OnlyX(ctx context.Context) *WorkExperience {
	node, err := weq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkExperience ID in the query.
// Returns a *NotSingularError when exactly one WorkExperience ID is not found.
// Returns a *NotFoundError when no entities are found.
func (weq *WorkExperienceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = weq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = &NotSingularError{workexperience.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (weq *WorkExperienceQuery) OnlyIDX(ctx context.Context) int {
	id, err := weq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkExperiences.
func (weq *WorkExperienceQuery) All(ctx context.Context) ([]*WorkExperience, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return weq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (weq *WorkExperienceQuery) AllX(ctx context.Context) []*WorkExperience {
	nodes, err := weq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkExperience IDs.
func (weq *WorkExperienceQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := weq.Select(workexperience.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (weq *WorkExperienceQuery) IDsX(ctx context.Context) []int {
	ids, err := weq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (weq *WorkExperienceQuery) Count(ctx context.Context) (int, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return weq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (weq *WorkExperienceQuery) CountX(ctx context.Context) int {
	count, err := weq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (weq *WorkExperienceQuery) Exist(ctx context.Context) (bool, error) {
	if err := weq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return weq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (weq *WorkExperienceQuery) ExistX(ctx context.Context) bool {
	exist, err := weq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkExperienceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (weq *WorkExperienceQuery) Clone() *WorkExperienceQuery {
	if weq == nil {
		return nil
	}
	return &WorkExperienceQuery{
		config:      weq.config,
		limit:       weq.limit,
		offset:      weq.offset,
		order:       append([]OrderFunc{}, weq.order...),
		predicates:  append([]predicate.WorkExperience{}, weq.predicates...),
		withUser:    weq.withUser.Clone(),
		withCompany: weq.withCompany.Clone(),
		// clone intermediate query.
		sql:  weq.sql.Clone(),
		path: weq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkExperienceQuery) WithUser(opts ...func(*UserQuery)) *WorkExperienceQuery {
	query := &UserQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withUser = query
	return weq
}

// WithCompany tells the query-builder to eager-load the nodes that are connected to
// the "company" edge. The optional arguments are used to configure the query builder of the edge.
func (weq *WorkExperienceQuery) WithCompany(opts ...func(*CompanyQuery)) *WorkExperienceQuery {
	query := &CompanyQuery{config: weq.config}
	for _, opt := range opts {
		opt(query)
	}
	weq.withCompany = query
	return weq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkExperience.Query().
//		GroupBy(workexperience.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (weq *WorkExperienceQuery) GroupBy(field string, fields ...string) *WorkExperienceGroupBy {
	group := &WorkExperienceGroupBy{config: weq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := weq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return weq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.WorkExperience.Query().
//		Select(workexperience.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (weq *WorkExperienceQuery) Select(field string, fields ...string) *WorkExperienceSelect {
	weq.fields = append([]string{field}, fields...)
	return &WorkExperienceSelect{WorkExperienceQuery: weq}
}

func (weq *WorkExperienceQuery) prepareQuery(ctx context.Context) error {
	for _, f := range weq.fields {
		if !workexperience.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if weq.path != nil {
		prev, err := weq.path(ctx)
		if err != nil {
			return err
		}
		weq.sql = prev
	}
	return nil
}

func (weq *WorkExperienceQuery) sqlAll(ctx context.Context) ([]*WorkExperience, error) {
	var (
		nodes       = []*WorkExperience{}
		_spec       = weq.querySpec()
		loadedTypes = [2]bool{
			weq.withUser != nil,
			weq.withCompany != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &WorkExperience{config: weq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, weq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := weq.withUser; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*WorkExperience, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.User = []*User{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*WorkExperience)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   workexperience.UserTable,
				Columns: workexperience.UserPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(workexperience.UserPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, weq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "user": %w`, err)
		}
		query.Where(user.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "user" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = append(nodes[i].Edges.User, n)
			}
		}
	}

	if query := weq.withCompany; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*WorkExperience, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Company = []*Company{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*WorkExperience)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   workexperience.CompanyTable,
				Columns: workexperience.CompanyPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(workexperience.CompanyPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, weq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "company": %w`, err)
		}
		query.Where(company.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "company" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Company = append(nodes[i].Edges.Company, n)
			}
		}
	}

	return nodes, nil
}

func (weq *WorkExperienceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := weq.querySpec()
	return sqlgraph.CountNodes(ctx, weq.driver, _spec)
}

func (weq *WorkExperienceQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := weq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (weq *WorkExperienceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   workexperience.Table,
			Columns: workexperience.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: workexperience.FieldID,
			},
		},
		From:   weq.sql,
		Unique: true,
	}
	if unique := weq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := weq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workexperience.FieldID)
		for i := range fields {
			if fields[i] != workexperience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := weq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := weq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := weq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := weq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (weq *WorkExperienceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(weq.driver.Dialect())
	t1 := builder.Table(workexperience.Table)
	selector := builder.Select(t1.Columns(workexperience.Columns...)...).From(t1)
	if weq.sql != nil {
		selector = weq.sql
		selector.Select(selector.Columns(workexperience.Columns...)...)
	}
	for _, p := range weq.predicates {
		p(selector)
	}
	for _, p := range weq.order {
		p(selector)
	}
	if offset := weq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := weq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkExperienceGroupBy is the group-by builder for WorkExperience entities.
type WorkExperienceGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wegb *WorkExperienceGroupBy) Aggregate(fns ...AggregateFunc) *WorkExperienceGroupBy {
	wegb.fns = append(wegb.fns, fns...)
	return wegb
}

// Scan applies the group-by query and scans the result into the given value.
func (wegb *WorkExperienceGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := wegb.path(ctx)
	if err != nil {
		return err
	}
	wegb.sql = query
	return wegb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := wegb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkExperienceGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkExperienceGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) StringsX(ctx context.Context) []string {
	v, err := wegb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkExperienceGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wegb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = fmt.Errorf("ent: WorkExperienceGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) StringX(ctx context.Context) string {
	v, err := wegb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkExperienceGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkExperienceGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) IntsX(ctx context.Context) []int {
	v, err := wegb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkExperienceGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wegb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = fmt.Errorf("ent: WorkExperienceGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) IntX(ctx context.Context) int {
	v, err := wegb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkExperienceGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkExperienceGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := wegb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkExperienceGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wegb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = fmt.Errorf("ent: WorkExperienceGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) Float64X(ctx context.Context) float64 {
	v, err := wegb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkExperienceGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(wegb.fields) > 1 {
		return nil, errors.New("ent: WorkExperienceGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := wegb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := wegb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (wegb *WorkExperienceGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wegb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = fmt.Errorf("ent: WorkExperienceGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wegb *WorkExperienceGroupBy) BoolX(ctx context.Context) bool {
	v, err := wegb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wegb *WorkExperienceGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range wegb.fields {
		if !workexperience.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := wegb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wegb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wegb *WorkExperienceGroupBy) sqlQuery() *sql.Selector {
	selector := wegb.sql
	columns := make([]string, 0, len(wegb.fields)+len(wegb.fns))
	columns = append(columns, wegb.fields...)
	for _, fn := range wegb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(wegb.fields...)
}

// WorkExperienceSelect is the builder for selecting fields of WorkExperience entities.
type WorkExperienceSelect struct {
	*WorkExperienceQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (wes *WorkExperienceSelect) Scan(ctx context.Context, v interface{}) error {
	if err := wes.prepareQuery(ctx); err != nil {
		return err
	}
	wes.sql = wes.WorkExperienceQuery.sqlQuery(ctx)
	return wes.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wes *WorkExperienceSelect) ScanX(ctx context.Context, v interface{}) {
	if err := wes.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (wes *WorkExperienceSelect) Strings(ctx context.Context) ([]string, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkExperienceSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wes *WorkExperienceSelect) StringsX(ctx context.Context) []string {
	v, err := wes.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (wes *WorkExperienceSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = wes.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = fmt.Errorf("ent: WorkExperienceSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (wes *WorkExperienceSelect) StringX(ctx context.Context) string {
	v, err := wes.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (wes *WorkExperienceSelect) Ints(ctx context.Context) ([]int, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkExperienceSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wes *WorkExperienceSelect) IntsX(ctx context.Context) []int {
	v, err := wes.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (wes *WorkExperienceSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = wes.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = fmt.Errorf("ent: WorkExperienceSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (wes *WorkExperienceSelect) IntX(ctx context.Context) int {
	v, err := wes.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (wes *WorkExperienceSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkExperienceSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wes *WorkExperienceSelect) Float64sX(ctx context.Context) []float64 {
	v, err := wes.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (wes *WorkExperienceSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = wes.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = fmt.Errorf("ent: WorkExperienceSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (wes *WorkExperienceSelect) Float64X(ctx context.Context) float64 {
	v, err := wes.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (wes *WorkExperienceSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(wes.fields) > 1 {
		return nil, errors.New("ent: WorkExperienceSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := wes.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wes *WorkExperienceSelect) BoolsX(ctx context.Context) []bool {
	v, err := wes.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (wes *WorkExperienceSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = wes.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{workexperience.Label}
	default:
		err = fmt.Errorf("ent: WorkExperienceSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (wes *WorkExperienceSelect) BoolX(ctx context.Context) bool {
	v, err := wes.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wes *WorkExperienceSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := wes.sqlQuery().Query()
	if err := wes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wes *WorkExperienceSelect) sqlQuery() sql.Querier {
	selector := wes.sql
	selector.Select(selector.Columns(wes.fields...)...)
	return selector
}
