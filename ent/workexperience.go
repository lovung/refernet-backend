// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"refernet/ent/workexperience"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// WorkExperience is the model entity for the WorkExperience schema.
type WorkExperience struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkExperienceQuery when eager-loading is set.
	Edges WorkExperienceEdges `json:"edges"`
}

// WorkExperienceEdges holds the relations/edges for other nodes in the graph.
type WorkExperienceEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Company holds the value of the company edge.
	Company []*Company `json:"company,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e WorkExperienceEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CompanyOrErr returns the Company value or an error if the edge
// was not loaded in eager-loading.
func (e WorkExperienceEdges) CompanyOrErr() ([]*Company, error) {
	if e.loadedTypes[1] {
		return e.Company, nil
	}
	return nil, &NotLoadedError{edge: "company"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkExperience) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case workexperience.FieldID:
			values[i] = new(sql.NullInt64)
		case workexperience.FieldTitle, workexperience.FieldLocation, workexperience.FieldDescription:
			values[i] = new(sql.NullString)
		case workexperience.FieldCreatedAt, workexperience.FieldUpdatedAt, workexperience.FieldStartDate, workexperience.FieldEndDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type WorkExperience", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkExperience fields.
func (we *WorkExperience) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workexperience.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			we.ID = int(value.Int64)
		case workexperience.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				we.CreatedAt = value.Time
			}
		case workexperience.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				we.UpdatedAt = value.Time
			}
		case workexperience.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				we.Title = value.String
			}
		case workexperience.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				we.Location = value.String
			}
		case workexperience.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				we.StartDate = value.Time
			}
		case workexperience.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				we.EndDate = value.Time
			}
		case workexperience.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				we.Description = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the WorkExperience entity.
func (we *WorkExperience) QueryUser() *UserQuery {
	return (&WorkExperienceClient{config: we.config}).QueryUser(we)
}

// QueryCompany queries the "company" edge of the WorkExperience entity.
func (we *WorkExperience) QueryCompany() *CompanyQuery {
	return (&WorkExperienceClient{config: we.config}).QueryCompany(we)
}

// Update returns a builder for updating this WorkExperience.
// Note that you need to call WorkExperience.Unwrap() before calling this method if this WorkExperience
// was returned from a transaction, and the transaction was committed or rolled back.
func (we *WorkExperience) Update() *WorkExperienceUpdateOne {
	return (&WorkExperienceClient{config: we.config}).UpdateOne(we)
}

// Unwrap unwraps the WorkExperience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (we *WorkExperience) Unwrap() *WorkExperience {
	tx, ok := we.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkExperience is not a transactional entity")
	}
	we.config.driver = tx.drv
	return we
}

// String implements the fmt.Stringer.
func (we *WorkExperience) String() string {
	var builder strings.Builder
	builder.WriteString("WorkExperience(")
	builder.WriteString(fmt.Sprintf("id=%v", we.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(we.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(we.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(we.Title)
	builder.WriteString(", location=")
	builder.WriteString(we.Location)
	builder.WriteString(", start_date=")
	builder.WriteString(we.StartDate.Format(time.ANSIC))
	builder.WriteString(", end_date=")
	builder.WriteString(we.EndDate.Format(time.ANSIC))
	builder.WriteString(", description=")
	builder.WriteString(we.Description)
	builder.WriteByte(')')
	return builder.String()
}

// WorkExperiences is a parsable slice of WorkExperience.
type WorkExperiences []*WorkExperience

func (we WorkExperiences) config(cfg config) {
	for _i := range we {
		we[_i].config = cfg
	}
}
